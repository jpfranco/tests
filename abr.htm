<!DOCTYPE html>
<html>
<head>
  <title>ABR Test</title>

  <style>
    body {
      font-family: 'Helvetica Neue', sans-serif;
    }
    #container {
      width: 800px;
    }
  </style>
  <!-- TODO: Load this stylesheet dynamically -->
  <link rel="stylesheet" href="//player.ooyala.com/static/v4/production/latest/skin-plugin/html5-skin.min.css"/>

  <script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js"></script>
  <script src="//rawgit.com/WebReflection/url-search-params/master/build/url-search-params.js"></script>
  <script src="//rawgit.com/ded/script.js/master/dist/script.min.js"></script>
</head>
<body>

  <h2>ABR Test</h2>

  <div id="container"></div>
  <canvas id="bitrateChart" width="400" height="80"></canvas>
  <canvas id="bandwidthChart" width="400" height="80"></canvas>

  <script>
    var _bitrateChart = null;
    var _bandwidthChart = null;
    var _params = getPageParameters();

    function ChartWrapper(domId, name, startTime, endTime, chartOptions) {
      this.name = name;
      this.startTime = startTime;
      this.endTime = endTime;
      this.previousValue = 0;
      this.labels = [startTime, startTime, endTime];
      this.data = [0, 0, 0];

      var chartConfig = {
        type: 'line',
        data: {
          labels: this.labels,
          datasets: [{
            label: name,
            data: this.data,
            cubicInterpolationMode: 'monotone'
          }]
        },
        options: chartOptions || {}
      };
      this.chart = new Chart(document.getElementById(domId).getContext('2d'), chartConfig);
    }

    ChartWrapper.prototype.update = function(currentValue) {
      var dateTimeNow = new Date();
      var dataIndex = this.data.length - 2;

      this.labels[dataIndex] = dateTimeNow;
      this.data[dataIndex] = this.previousValue;
      dataIndex++;

      if (currentValue) {
        this.labels[dataIndex] = dateTimeNow;
        this.data[dataIndex] = currentValue;
        this.previousValue = currentValue;
        dataIndex++;
      }

      this.labels[dataIndex] = dateTimeNow;
      this.data[dataIndex] = 0;
      dataIndex++;
      this.labels[dataIndex] = this.endTime;
      this.data[dataIndex] = 0;

      console.log('>>>>', this.name + ':', this.previousValue, 'kbps -', moment(dateTimeNow).format('h:mm:ss.SSSS A'));
      this.chart.update();
    };

    ChartWrapper.prototype.getLastUpdateDate = function() {
      return this.labels[this.labels.length - 2];
    };

    function getPageParameters() {
      var params = {};
      var urlParams = new URLSearchParams(window.location.search);
      var defaultEmbedToken = 'http://player.ooyala.com/sas/embed_token/8yMGYyOvhG5HuuITgXl_UUwes_5e/FqM3EwODE692MhTI9X0bHx4mj7ZvrquU?account_id=95032&api_key=8yMGYyOvhG5HuuITgXl_UUwes_5e.Bk0HN&expires=1580569200&signature=pY3ZitMpsnI9waunSDiiGcmU06ub522QcINCqVOWT2I&override_syndication_group=override_all_synd_groups';

      params.branch = urlParams.get('branch') || 'candidate';
      params.version = urlParams.get('version') || 'latest';
      params.platform = urlParams.get('platform') || 'html5';
      params.embedCode = urlParams.get('ec') || 'FqM3EwODE692MhTI9X0bHx4mj7ZvrquU';
      params.pcode = urlParams.get('pcode') || '8yMGYyOvhG5HuuITgXl_UUwes_5e';
      params.playerBrandingId = urlParams.get('pbid') || '12190f6ca4ba4371a4b67eb1bfc9c91d';
      params.embedToken = urlParams.get('embedToken') ? decodeURIComponent(urlParams.get('embedToken')) : defaultEmbedToken;
      params.preventAdaptationOnSeek = urlParams.get('preventAdaptationOnSeek');
      params.startupBitrate = urlParams.get('startupBitrate');

      return params;
    }

    function loadScripts(branch, version, callback) {
      $script.order([
        '//player.ooyala.com/static/v4/' + branch + '/' + version + '/core.min.js',
        '//player.ooyala.com/static/v4/' + branch + '/' + version + '/video-plugin/bit_wrapper.min.js',
        '//player.ooyala.com/static/v4/' + branch + '/' + version + '/video-plugin/main_html5.min.js',
        '//player.ooyala.com/static/v4/' + branch + '/' + version + '/skin-plugin/html5-skin.min.js'
      ], callback);
    }

    function initCharts() {
      var chartOptions = {
        animation: false,
        scales: {
          xAxes: [{
            type: 'time',
            time: {
              displayFormats: {
                millisecond: 'hh:mm:ss',
                second: 'hh:mm:ss',
                minute: 'hh:mm:ss',
                hour: 'hh:mm:ss',
                day: 'hh:mm:ss',
                week: 'hh:mm:ss',
                month: 'hh:mm:ss',
                quarter: 'hh:mm:ss',
                year: 'hh:mm:ss',
              }
            }
          }],
          yAxes: [{
            ticks: {
              beginAtZero: true
            }
          }]
        }
      };

      var startTime = new Date();
      var endTime = new Date(startTime);
      endTime.setMinutes(startTime.getMinutes() + 30);

      _bitrateChart = new ChartWrapper('bitrateChart', 'Bitrate', startTime, endTime, chartOptions);
      _bandwidthChart = new ChartWrapper('bandwidthChart', 'Bandwidth Estimate', startTime, endTime, chartOptions);
    }

    function initPlayer() {
      var playerParams = {
        pcode: _params.pcode,
        playerBrandingId: _params.playerBrandingId,
        platform: _params.platform,
        embedToken: _params.embedToken,
        onCreate: window.onCreate,
        debug: true,
        skin: {
          config: '//player.ooyala.com/static/v4/' + _params.branch + '/' + _params.version + '/skin-plugin/skin.json'
        }
      };

      if (_params.preventAdaptationOnSeek || _params.startupBitrate) {
        playerParams['bit-wrapper'] = {};

        if (_params.preventAdaptationOnSeek) {
          playerParams['bit-wrapper'].tweaks = {
            prevent_adaptation_on_seek: _params.preventAdaptationOnSeek === 'true' ? true : false
          };
        }
        if (_params.startupBitrate) {
          playerParams['bit-wrapper'].adaptation = {
            desktop: {
              startupBitrate: parseInt(_params.startupBitrate, 10)
            }
          };
        }
      }

      OO.ready(function() {
        window.pp = OO.Player.create('container', _params.embedCode, playerParams);
      });
    }

    function onCreate(player) {
      var bmPlayer = null;

      player.mb.subscribe('*', 'test', function(eventName, eventCode, data) {
        switch (eventName) {
          case OO.EVENTS.PLAYBACK_READY:
            if (!bmPlayer) {
              var allBmPlayers = window.bitmovin.player('*');
              bmPlayer = allBmPlayers[1] || allBmPlayers[0]; // Workaround for 6.1.21 bug
              bmPlayer.addEventHandler(bitmovin.player.EVENT.ON_DOWNLOAD_FINISHED, window.onDownloadFinished);
            }
            break;
          case OO.EVENTS.BITRATE_CHANGED:
            _bitrateChart.update(Math.round(eventCode.bitrate / 1000));
            break;
          case OO.EVENTS.PAUSE:
            _bitrateChart.update();
            _bandwidthChart.update();
            break;
          case OO.EVENTS.PLAYHEAD_TIME_CHANGED:
            // Update data point to show real time bitrate and bandwidth
            var dateTimeNow = new Date();
            var lastBRUpdate = dateTimeNow.getTime() - _bitrateChart.getLastUpdateDate().getTime();
            if (lastBRUpdate > 30000) {
              console.log(">>>>lastBRUpdate", lastBRUpdate);
              _bitrateChart.update(null);
            }
            var lastBWupdate = dateTimeNow.getTime() - _bandwidthChart.getLastUpdateDate().getTime();
            if (lastBWupdate > 30000) {
              console.log(">>>>lastBWupdate", lastBWupdate);
              _bandwidthChart.update();
            }
            break;
        }
      });
    }

    function onDownloadFinished(data) {
      if (data.mimeType && data.mimeType.indexOf('video') >= 0 && data.size > 1000) {
        var estimatedBandwidth = Math.round(((data.size * 8) / data.downloadTime) / 1000);
        _bandwidthChart.update(estimatedBandwidth);
      }
    };

    loadScripts(_params.branch, _params.version, function() {
      initCharts();
      initPlayer();
    });
  </script>
</body>
</html>
